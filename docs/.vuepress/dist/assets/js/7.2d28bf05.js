(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{154:function(e,r,o){"use strict";o.r(r);var i=o(0),c=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"docker"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker")]),o("h3",{attrs:{id:"docker-란"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-란","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker 란?")]),o("ul",[o("li",[o("p",[e._v("VM Waer 는 가상화 환경, CPU, 기타자원을 완전히 가상화해서 컴퓨터를 새로만드는것이지만,\n리눅스의 컨테이터 기술을 이용해서 가상화를 하지않고, 프로세스만 격리해서 빠르게 실행시키는 기술.")]),o("ul",[o("li",[o("p",[e._v("기존의 운영체제안에서 새로운 운영체제를 새로 설치해서 독립적인 환경이 아닌,\n기존의 운영체제 안에서 프로세스를 격리시키는 기술을 이용해 가상머신을 설치한것과 거의 동일한 효과를 볼 수 있다.")])]),o("li",[o("p",[e._v("Docker vs 가상머신")]),o("ul",[o("li",[e._v("가상머신을 사용하게 되면 OS를 새로 설치를 해야 하기때문에 용량이 커진다.")]),o("li",[e._v("가상머신은 속도가 느리다.")]),o("li",[e._v("가상머신은 CPU 에서 가상화 기술을 지원하면서 빨라지긴 했지만, 쪼개쓰는것은 같기때문에 느릴 수 밖에 없다.")]),o("li",[e._v("Docker는 프로세스를 격리만 할 뿐, 새로운 OS를 띄우지 않는다.")]),o("li",[e._v("Docker는 기존 시스템 자원을 공유 하는 것.")]),o("li",[e._v("Docker는 가상머신의 효과는 내지만, 가상머신은 아니다.")]),o("li",[e._v("리얼 머신과의 성능상의 차이는 거의 없다. (벤치마킹 99.8~9%)")]),o("li",[e._v("자동 설치 스크립트 제공")])])])])]),o("li",[o("p",[e._v("$ "),o("code",[e._v("sudo wget -qO- https://get.docker.com/ | sh")])])])]),o("h3",{attrs:{id:"redhat-enterprise-linux-centos-설정"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#redhat-enterprise-linux-centos-설정","aria-hidden":"true"}},[e._v("#")]),e._v(" RedHat Enterprise Linux, CentOS 설정")]),o("ul",[o("li",[o("p",[e._v("CentOS 6")]),o("ul",[o("li",[e._v("$ "),o("code",[e._v("sudo yum install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm")])]),o("li",[e._v("$ "),o("code",[e._v("sudo yum install docker-io")])])])]),o("li",[o("p",[e._v("CentOS 7")]),o("ul",[o("li",[e._v("$ "),o("code",[e._v("sudo yum install docker")])])])]),o("li",[o("p",[e._v("Docker 서비스 실행")]),o("ul",[o("li",[e._v("$ "),o("code",[e._v("sudo service docker start")])])])]),o("li",[o("p",[e._v("부팅시 자동실행")]),o("ul",[o("li",[e._v("$ "),o("code",[e._v("sudo chkconfig docker on")])])])])]),o("h3",{attrs:{id:"시작하기"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#시작하기","aria-hidden":"true"}},[e._v("#")]),e._v(" 시작하기.")]),o("ul",[o("li",[o("p",[e._v("Docker 설치 확인")]),o("ul",[o("li",[e._v("Docker 사용시에는 관리자 권한으로 실행")]),o("li",[e._v("$ "),o("code",[e._v("docker")]),e._v(" , $ "),o("code",[e._v("sudo docker")]),e._v(" , $ "),o("code",[e._v("docker version")])])])]),o("li",[o("p",[e._v("Docker 이미지 확인")]),o("ul",[o("li",[e._v("$ "),o("code",[e._v("docker images")])])])]),o("li",[o("p",[e._v("Docker는 git과 마찬가지로 push, pull 명령이 있다.")]),o("ul",[o("li",[e._v("docker-hub 가 있다.")]),o("li",[e._v("docker 와 docker-hub 의 관계는 git 과 git-hub와 비슷하다.")]),o("li",[e._v("git은 리눅스토발즈가 만들었고, git-hub는 다른사람들이 만들었지만,\ndocker와 docker-hub는 같이 만들어졌다.")]),o("li",[e._v("$ "),o("code",[e._v("docker pull ubuntu:14.04")]),e._v(" 로 우분투 이미지를 가져올 수 있다.")]),o("li",[e._v("$ "),o("code",[e._v("docker search ubuntu")]),e._v(" 로 이미지를 검색 할 수 있다.\n"),o("ul",[o("li",[e._v("ID가 붙어있는것은 clone 후 custom 해서 사용자들이 올린 이미지,\nID가 없는것은 공식이미지")])])])])]),o("li",[o("p",[e._v("Docker의 두가지 개념")]),o("ul",[o("li",[e._v("image : 실행파일, 라이브러리가 조합된 것.")]),o("li",[e._v("container : 이미지를 실행 한 것.(프로세스)")])])]),o("li",[o("p",[e._v("Docker 실행")]),o("ul",[o("li",[e._v("$ docker run -i -t --name woongsik ubuntu:14.04 /bin/bash\n"),o("ul",[o("li",[e._v("-i : interactive (사용자가 입출력을 할 수 있는 상태)")]),o("li",[e._v("-t : 가상 터미널 환경을 에뮬레이션 해 주는 옵션")]),o("li",[e._v("-d : 백그라운드로 실행")]),o("li",[e._v("--name : docker Name 설정")]),o("li",[e._v("/bin/bash : Docker는 다른 가상머신과는 다르게 실행할 메인실행파일을 지정해줘야 한다. 컨테이너 안에있는 실행파일을 실행해서 실행된 상태로 만들어 놔야 컨테이너가 유지된다. 컨테이너 안에있는 메인 실행파일이 종료가 되면 컨테이너도 같이 종료된다.")]),o("li",[e._v("컨테이너 종료\n"),o("ul",[o("li",[e._v("$ "),o("code",[e._v("exit")])]),o("li",[e._v("종료 확인 : $ "),o("code",[e._v("docker ps -a")])]),o("li",[e._v("-a : 종료된 컨테이너까지 확인 옵션")])])]),o("li",[e._v("$ "),o("code",[e._v("docker start")]),e._v(" {docker Name} or {docker Container ID}\n"),o("ul",[o("li",[e._v("run 과 start 의 차이\n"),o("ul",[o("li",[e._v("run : docker 실행과 동시에 docker로 진입.")]),o("li",[e._v("start : docker 실행 하지만 진입은 하지 않는다.")]),o("li",[e._v("start 후 docker 진입 : $ "),o("code",[e._v("docker attach")]),e._v(" {docker Name} or {docker Container ID}")]),o("li",[o("code",[e._v("Ctrl + P + Q")]),e._v(" 단축키를 이용하면 컨테이너를 종료하지 않고 빠져나온다.")]),o("li",[e._v("컨테이너를 종료하지 않고 빠져나오는경우 외부에서 컨테이너를 종료 할 수 있다.\n"),o("ul",[o("li",[e._v("$ "),o("code",[e._v("docker stop")]),e._v(" {docker Name} or {docker Container ID}")])])])])])])]),o("li",[e._v("docker를 종료 한 후 컨테이너 리스트에서 지우고 싶을경우\n"),o("ul",[o("li",[e._v("$ "),o("code",[e._v("docker rm")]),e._v(" {docker Name} or {docker Container ID}")])])]),o("li",[e._v("docker image 삭제\n"),o("ul",[o("li",[e._v("$ "),o("code",[e._v("docker rmi")]),e._v(" {Repository Name}")])])]),o("li",[e._v("exec (Docker로 진입하지 않아도 외부에서 Docker로 명령어 전달)\n"),o("ul",[o("li",[e._v("$ docker "),o("code",[e._v("exec")]),e._v(" hello echo 1\n"),o("ul",[o("li",[e._v("docker "),o("code",[e._v("exec")]),e._v(" {docker Name} {명령어} {내용}")])])]),o("li",[e._v("$ docker "),o("code",[e._v("exec")]),e._v(" hello touch /woongsik.txt")])])])])])])])])])}],!1,null,null,null);r.default=c.exports}}]);